.version 6.4
.target sm_70
.address_size 64

.visible .entry copy_kernel(
    .param .u64 dst_ptr, .param .u64 src_ptr, .param .u32 n
)
{
    .maxrregcount 32        // limit registers per thread to 32 to boost occupancy
    .reg .pred %p<2>;
    .reg .b32  %r<6>;
    .reg .b64  %rd<6>;

    // load kernel parameters
    ld.param.u64 %rd1, [dst_ptr];   // dst base
    ld.param.u64 %rd2, [src_ptr];   // src base
    ld.param.u32 %r1,  [n];         // length

    mov.u32 %r2, %ctaid.x;          // block id
    mov.u32 %r3, %tid.x;            // thread id within block
    mad.lo.u32 %r4, %r2, %ntid.x, %r3; // global thread idx
    setp.ge.u32 %p1, %r4, %r1;      // if idx >= n branch out
    @%p1 bra DONE;

    mul.wide.u32 %rd3, %r4, 4;      // byte offset = idx * 4
    add.u64 %rd4, %rd2, %rd3;      // src addr
    ld.global.u32 %r5, [%rd4];      // load value
    add.u64 %rd4, %rd1, %rd3;      // dst addr
    st.global.u32 [%rd4], %r5;      // store value
DONE:
    ret;
}