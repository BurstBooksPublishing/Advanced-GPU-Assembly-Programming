#include <cuda_runtime.h>
#include <mma.h>
using namespace nvcuda::wmma;

__global__ void wmma_gemm_kernel(const half *A, const half *B, float *C, int M, int N, int K) {
  // Each warp computes one 16x16 tile
  int warpId = (blockIdx.x * blockDim.x + threadIdx.x) / 32;
  int tileRow = warpId / (N / 16);
  int tileCol = warpId % (N / 16);

  // WMMA fragments
  fragment<matrix_a, 16, 16, 16, half, row_major> aFrag;
  fragment<matrix_b, 16, 16, 16, half, col_major> bFrag;
  fragment<accumulator, 16, 16, 16, float> cFrag;
  fill_fragment(cFrag, 0.0f);

  for (int k = 0; k < K; k += 16) {
    const half* aTile = A + (tileRow * 16) * K + k;
    const half* bTile = B + k * N + (tileCol * 16);

    load_matrix_sync(aFrag, aTile, K);
    load_matrix_sync(bFrag, bTile, N);
    mma_sync(cFrag, aFrag, bFrag, cFrag);
  }

  float* cTile = C + (tileRow * 16) * N + (tileCol * 16);
  store_matrix_sync(cTile, cFrag, N, mem_row_major);
}