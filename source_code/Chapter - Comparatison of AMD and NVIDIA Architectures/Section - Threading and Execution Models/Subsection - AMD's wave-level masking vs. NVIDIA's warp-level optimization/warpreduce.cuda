__global__ void warp_reduce_sum(const float *in, float *out, int N) {
  int gid = blockIdx.x * blockDim.x + threadIdx.x;
  float val = (gid < N) ? in[gid] : 0.0f;      // guard threads outside range

  // warp-level reduction: assumes 32-lane warps
  for (int offset = 16; offset > 0; offset >>= 1) {
    float y = __shfl_down_sync(0xffffffff, val, offset); // shuffle within warp
    val += y;                                           // thread-local add
  }

  // write lane 0 of each warp to output (one element per warp)
  if ((threadIdx.x & 31) == 0) out[gid >> 5] = val;     // lane 0 stores result
}